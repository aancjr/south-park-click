{"version":3,"sources":["components/FriendCard/index.js","components/Navbar/index.js","components/GameplayModal/GameplayModal.js","App.js","index.js"],"names":["FriendCard","props","Card","Button","className","id","variant","onClick","southParkMemory","Image","varient","src","image","alt","name","Body","Text","alias","Navbar","bg","Brand","score","highscore","GameplayModal","Modal","show","onHide","close","Header","Title","Footer","App","state","clicked","friends","highScore","setShow","includes","alert","setState","console","log","prevState","shuffleCards","arr","i","length","j","Math","floor","random","temp","handleShow","handleClose","this","Container","Row","map","friend","key","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c742cbe6.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/button\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <Card>\n      <Button\n        className=\"charbtn\"\n        id=\"buttonshadow\"\n        variant=\"outline-*\"\n        onClick={() => props.southParkMemory(props.id)}\n      >\n        <Image\n          className=\"imgsize\"\n          varient=\"top\"\n          src={props.image}\n          alt={props.name}\n        />\n        <Card.Body className=\"cardbody\">\n          <Card.Text className=\"title text-center\">{props.name}</Card.Text>\n          <Card.Text className=\"cardtext text-center\">\n            <strong>Alias:</strong> {props.alias}\n          </Card.Text>\n        </Card.Body>\n      </Button>\n    </Card>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport NavBar from \"react-bootstrap/navbar\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <NavBar className=\"nav\" bg=\"light\">\n      <NavBar.Brand>\n        <strong>South Park Rodeo!</strong>\n      </NavBar.Brand>\n      <span className=\"ml-auto\">\n        <strong>\n          Score:{\" \"}\n          <span className=\"currentScore\" id=\"currentScore\">\n            {props.score}\n          </span>{\" \"}\n          | High Score:{\" \"}\n          <span className=\"highScore\" id=\"highScore\">\n            {\" \"}\n            {props.highscore}\n          </span>\n        </strong>\n      </span>\n    </NavBar>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction GameplayModal(props) {\n  return (\n    <Modal show={props.show} onHide={props.close}>\n      <Modal.Header>\n        <Modal.Title className=\"mx-auto\">South Park Rodeo!</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n        <p>Welcome to South Park Rodeo!</p>\n        <p>\n          The object of the game is to click each South Park character{\" \"}\n          <strong>once</strong>. Each time a character is clicked on, the score\n          will increase by one and the cards will shuffle. If a character is\n          clicked on twice, the game ends, your highscore is tallied and the\n          game restarts. The total maximum number of points is 12 (one point per\n          character).\n        </p>\n        <p>Click \"Close\" to begin the game!</p>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"success\" onClick={props.close}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default GameplayModal;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Navbar from \"./components/Navbar\";\nimport GameplayModal from \"./components/GameplayModal/GameplayModal\";\nimport friends from \"./friends.json\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    clicked: [],\n    friends,\n    highScore: 0,\n    score: 0,\n    show: false,\n    setShow: false\n  };\n\n  southParkMemory = id => {\n    if (this.state.clicked.includes(id)) {\n      alert(\"Okay, let's try this again!\");\n\n      this.setState({\n        clicked: [],\n        friends,\n        score: 0\n      });\n\n      console.log(`High Score: ${this.state.highScore}`);\n    } else {\n      this.setState(prevState => ({\n        clicked: [id, ...prevState.clicked],\n        score: this.state.score + 1\n      }));\n\n      console.log(this.state.clicked);\n    }\n  };\n\n  highscore = () => {\n    if (this.state.score >= 12) {\n      this.setState({\n        highScore: 12,\n        clicked: [],\n        score: 0\n      });\n      alert(\"YOU WON! Let's go to City Wok!\");\n    } else if (this.state.score > this.state.highScore) {\n      this.setState({ highScore: this.state.score });\n    }\n  };\n\n  shuffleCards = arr => {\n    if (this.state.score <= 12) {\n      for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * arr.length);\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n\n    return arr;\n  };\n\n  handleShow = () => {\n    if (this.state.highScore === 0) {\n      this.setState({\n        show: true,\n        setShow: true\n      });\n    }\n  };\n\n  handleClose = () => {\n    this.setState({\n      show: false,\n      setShow: false\n    });\n  };\n\n  componentDidMount() {\n    this.shuffleCards(friends);\n    this.handleShow();\n  }\n\n  componentDidUpdate() {\n    this.shuffleCards(friends);\n    this.highscore();\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar score={this.state.score} highscore={this.state.highScore} />\n        <GameplayModal show={this.state.show} close={this.handleClose} />\n\n        <Container>\n          <Row className=\"tile-row justify-content-center\">\n            {this.state.friends.map(friend => (\n              <FriendCard\n                southParkMemory={this.southParkMemory}\n                key={friend.id}\n                id={friend.id}\n                name={friend.name}\n                image={friend.image}\n                alias={friend.alias}\n              />\n            ))}\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}