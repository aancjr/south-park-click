{"ast":null,"code":"var _jsxFileName = \"/Users/Home/Desktop/Bootcamp/Homework/south-park-click/src/App.js\";\nimport React, { Component } from 'react';\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clicked: [],\n      friends,\n      highScore: 0,\n      count: 0\n    };\n\n    this.southParkMemory = id => {\n      if (this.state.clicked.includes(id)) {\n        alert(\"Try again!\");\n        highscore();\n        this.setState({\n          clicked: [],\n          friends,\n          count: 0\n        });\n        console.log(\"High Score: \".concat(this.state.highScore));\n      } else {\n        this.setState(prevState => ({\n          clicked: [id, ...prevState.clicked],\n          count: this.state.count + 1\n        }));\n        console.log(this.state.clicked);\n      }\n    };\n\n    this.highscore = () => {\n      if (this.state.count > this.state.highScore) {\n        this.setState({\n          highScore: this.state.count\n        });\n      }\n    };\n\n    this.shuffleCards = arr => {\n      if (this.state.count <= 12) {\n        for (let i = arr.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * arr.length);\n          const temp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = temp;\n        }\n\n        ;\n      } else {\n        this.setState({\n          count: 0\n        });\n      }\n\n      ;\n      return arr;\n    };\n  }\n\n  componentDidMount() {\n    this.shuffleCards(friends);\n  }\n\n  componentDidUpdate() {\n    this.shuffleCards(friends);\n  }\n\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      count: this.state.count,\n      highscore: this.state.highScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"South Park Click!\"), React.createElement(\"div\", {\n      className: \"container col-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.friends.map(friend => React.createElement(FriendCard, {\n      southParkMemory: this.southParkMemory,\n      key: friend.id,\n      id: friend.id,\n      name: friend.name,\n      image: friend.image,\n      alias: friend.alias,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Home/Desktop/Bootcamp/Homework/south-park-click/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Navbar","Title","friends","App","state","clicked","highScore","count","southParkMemory","id","includes","alert","highscore","setState","console","log","prevState","shuffleCards","arr","i","length","j","Math","floor","random","temp","componentDidMount","componentDidUpdate","render","map","friend","name","image","alias"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FriendCard from \"./components/FriendCard\"\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  state = {\n    clicked: [],\n    friends,\n    highScore: 0,\n    count: 0\n  };\n\n\n  southParkMemory = id => {\n\n    if (this.state.clicked.includes(id)) {\n\n      alert(\"Try again!\");\n      highscore();\n      this.setState({\n        clicked: [],\n        friends,\n        count: 0\n      });\n\n      console.log(`High Score: ${this.state.highScore}`)\n\n    } else {\n\n      this.setState(prevState => ({\n        clicked: [id, ...prevState.clicked],\n        count: this.state.count + 1\n      }));\n\n      console.log(this.state.clicked);\n\n    }\n  };\n\n  highscore = () => {\n    if (this.state.count > this.state.highScore) {\n      this.setState({highScore: this.state.count})\n    }\n  }\n\n  shuffleCards = arr => {\n\n    if (this.state.count <= 12) {\n      for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * arr.length)\n        const temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n      };\n\n    } else {\n\n      this.setState({\n        count: 0\n      });\n\n    };\n\n    return arr\n  };\n\n  componentDidMount() {\n    this.shuffleCards(friends);\n  }\n\n  componentDidUpdate() {\n    this.shuffleCards(friends);\n  }\n\n\n  render() {\n\n    return (\n      <Wrapper>\n        <Navbar count={this.state.count} highscore={this.state.highScore}/>\n        <Title>South Park Click!</Title>\n        <div className=\"container col-8\">\n          {this.state.friends.map(friend =>\n            <FriendCard\n              southParkMemory={this.southParkMemory}\n              key={friend.id}\n              id={friend.id}\n              name={friend.name}\n              image={friend.image}\n              alias={friend.alias}\n            />\n          )}\n        </div>\n      </Wrapper>\n    )\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}